<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Identifier</key>
	<string>com.antondomashnev.template.hackathonApplication.Twitter</string>
	<key>Name</key>
	<string>Facebook Dependency</string>
	<key>Ancestors</key>
	<array>
	</array>
	<key>Description</key>
	<string></string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Whether the application should use support Twitter authorization and other</string>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Name</key>
			<string>Enable Twitter</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict> 
						<key>Classes/TwitterServiceObjectManager.h</key>
						<dict>
							<key>Beginning</key>
							<string>#import "ServiceObjectManager.h"

extern NSString *const kTwitterKey;
extern NSString *const kTwitterSecret;

@interface TwitterServiceObjectManager : ServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
							<string>Networking</string>
						</dict>

						<key>Classes/TwitterServiceObjectManager.m</key>
						<dict>
							<key>Beginning</key>
							<string>#import "TwitterServiceObjectManager.h"
#import "TWAPIManager.h"

NSString *const TwitterKey = @"&lt;# Twitter Consumer Key #&gt;";
NSString *const TwitterSecret = @"&lt;# Twitter Consumer Secret #&gt;";

@implementation TwitterServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
							<string>Networking</string>
						</dict>

						<key>Classes/TwitterServiceObjectManager.m:method:initWithServiceName</key>
						<dict>
							<key>Beginning</key>
							<string>- (id)initWithServiceName:(NSString *)serviceName
{
    if(self = [super initWithServiceName: serviceName])
    {
				    		</string>
				    		<key>End</key>
				    		<string>
	}
    return self;
}
				    		</string>
						</dict>

						<key>Classes/TwitterServiceObjectManager.m:method:sharedManager</key>
						<dict>
							<key>Beginning</key>
							<string>static TwitterHelper *sharedInstance;
+ (instacetype)sharedManager{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        sharedInstance = [[TwitterServiceObjectManager alloc] initWithServiceName:@"Twitter"];
    });
							</string>
							<key>End</key>
							<string>    
	return sharedInstance;
}
							</string>
						</dict>

						<key>Classes/TwitterServiceObjectManager.m:method:obtainAccessTokenForAcount</key>
						<dict>
							<key>Beginning</key>
							<string>#pragma mark - Authorization Helpers
- (void)obtainAccessTokenForAcount:(ACAccount *)account usingCallback:(void(^)(NSString *accessToken, NSError *error))callback
{
	TWAPIManager *apiManager = [[TWAPIManager alloc] init];
    
    [apiManager
     performReverseAuthForAccount:account
     withHandler:^(NSData *responseData, NSError *error) {
         NSString *token = nil;
         if (responseData) {
             token = [[NSString alloc]
                      initWithData:responseData
                      encoding:NSUTF8StringEncoding];
         }
         if(callback)
             callback(token, error);
     }];
				    		</string>
				    		<key>End</key>
				    		<string>}</string>
						</dict>

						<key>Classes/TwitterServiceObjectManager.m:method:selectTwitterAccountIndexFromAccounts</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)selectTwitterAccountIndexFromAccounts:(NSArray*)accounts withCallback:(void(^)(ACAccount* account))callback
{
	
							</string>
							<key>End</key>
							<string>        
	return [super appropriateObjectRequestOperationWithObject:object method:method path:path parameters:[self completeRequestParametersForParameters: parameters]];
}
							</string>
						</dict>

						<key>Classes/FacebookServiceObjectManager.m:method:openSessionIfTokenLoaded</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)openSessionIfTokenLoaded
{
    if([FBSession activeSession].state == FBSessionStateCreatedTokenLoaded){
        
        if(![[FBSession activeSession].permissions containsObject:[[CQFacebookAuthInfo FBWritePermissions] firstObject]])
        {
            [FBSession openActiveSessionWithReadPermissions:[CQFacebookAuthInfo FBReadPermissions]
                                               allowLoginUI:YES
                                          completionHandler:nil];
        }
        else if([[FBSession activeSession].permissions containsObject: [[CQFacebookAuthInfo FBWritePermissions] firstObject]])
        {
            [FBSession openActiveSessionWithPublishPermissions:[CQFacebookAuthInfo FBWritePermissions]
                                               defaultAudience:FBSessionDefaultAudienceEveryone
                                                  allowLoginUI:YES
                                             completionHandler:nil];
        }
    }
							</string>
							<key>End</key>
							<string>{</string>
						</dict>

						<key>Classes/FacebookServiceObjectManager.m:method:defaultErrorForCode</key>
						<dict>
							<key>Beginning</key>
							<string>- (NSError *)defaultErrorForCode:(NSInteger)code underlyingError:(NSError *)underlyingError
{
	if(code == FBErrorLoginFailedOrCancelled){
        NSString *loginFailingReason = underlyingError.userInfo[FBErrorLoginFailedReason];
        if([loginFailingReason isEqualToString:@"com.facebook.sdk:SystemLoginDisallowedWithoutError"]){
            return [NSError errorWithDomain:underlyingError.domain code:code userInfo:@{NSLocalizedDescriptionKey:NSLocalizedString(@"Accounts access error", @"Facebook: accounts access error description"),
                                                                                        NSLocalizedRecoverySuggestionErrorKey:NSLocalizedString(@"Please, allow Cirqle to access your Facebook accounts from your device's privacy settings", @"Facebook: accounts access error recovery suggestion")}];
        }
        else{
            return underlyingError;
        }
    }
    else{
        return underlyingError;
    }				
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/FacebookServiceObjectManager.m:method:logInWithCallback</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)logInWithCallback:(CQServiceAuthInfoBlock)callback permissions:(ServicePermissionSet)permissions
{
	void(^localCallback)(FBSession *session, FBSessionState status, ServicePermissionSet permissions, NSError *error) = ^(FBSession *session, FBSessionState status, ServicePermissionSet permissions, NSError *error){
        if(FB_ISSESSIONOPENWITHSTATE(status) &amp;&amp;
           error == nil)
           	{
           		DDLogInfo(@"Facebook login succes");
           		NSMutableDictionary *result = [@{} mutableCopy];
           		if(session.accessTokenData.accessToken)
           		{
           			result[kFacebookAccessTokenKey] = session.accessTokenData.accessToken;
           		}
           		if(session.accessTokenData.expirationDate)
           		{
           			result[kFacebookExpirationDateKeyKey] = session.accessTokenData.expirationDate;
           		}
           		BLOCK_SAFE_RUN(callback, result, error);
        }
        else
        {
            
            DDLogWarn(@"Facebook login failed: %@", [error description]);
            BLOCK_SAFE_RUN(callback, nil, error);
        }
    };
    
    switch (permissions) 
    {
        case ServicePermissionSetRead:
        {
            [FBSession openActiveSessionWithReadPermissions:nil
                                                  allowLoginUI:YES
                                             completionHandler:^(FBSession *session, FBSessionState status, NSError *error) 
                                             {
                                                 localCallback(session, status, permissions, error);
                                             }];
            break;
        }
        case ServicePermissionSetWrite:
        {
        	if(FB_ISSESSIONOPENWITHSTATE(status))
        	{
        		[[FBSession activeSession] requestNewPublishPermissions:nil defaultAudience:FBSessionDefaultAudienceEveryone completionHandler:^(FBSession *session, NSError *error) 
												       		{
												                localCallback(session, session.state, permissions, error);
												            }];
        	}
        	else
        	{
        		[FBSession openActiveSessionWithReadPermissions:nil
                                                  allowLoginUI:YES
                                             completionHandler:^(FBSession *session, FBSessionState status, NSError *error) 
                                             {
                                             	if(FB_ISSESSIONOPENWITHSTATE(status) &amp;&amp;
           										   error == nil)
           										   	{
           										   		[[FBSession activeSession] requestNewPublishPermissions:nil defaultAudience:FBSessionDefaultAudienceEveryone completionHandler:^(FBSession *session, NSError *error) 
												       		{
												                localCallback(session, session.state, permissions, error);
												            }];
           										   	}
           										   	else
           										   	{
           										   		localCallback(session, status, permissions, error);
           										   	}
                                             }];
        	}
            break;
        }
        default:
            break;
    }
							</string>
							<key>End</key>
							<string>}</string>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>../Podfile:Facebook-iOS-SDK</string>
						<string>Classes/FacebookServiceObjectManager.h</string>
						<string>Classes/FacebookServiceObjectManager.m</string>
						<string>Classes/FacebookServiceObjectManager.m:method:initWithHTTPClient</string>
						<string>Classes/FacebookServiceObjectManager.m:method:sharedManager</string>
						<string>Classes/FacebookServiceObjectManager.m:method:completeRequestParametersForParameters</string>
						<string>Classes/FacebookServiceObjectManager.m:method:appropriateObjectRequestOperationWithObject</string>
						<string>Classes/FacebookServiceObjectManager.m:method:logInWithCallback</string>
					</array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
