<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Identifier</key>
	<string>com.antondomashnev.template.hackathonApplication.Twitter</string>
	<key>Name</key>
	<string>Facebook Dependency</string>
	<key>Ancestors</key>
	<array>
	</array>
	<key>Description</key>
	<string></string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Whether the application should use support Twitter authorization and other</string>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Name</key>
			<string>Enable Twitter</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict> 
                        <key>Classes/Networking/Twitter/OAuth+Additions.h</key>
                        <dict>
                            <key>Path</key>
                            <string>ABOAuthCore/OAuth+Additions.h</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/OAuth+Additions.m</key>
                        <dict>
                            <key>Path</key>
                            <string>ABOAuthCore/OAuth+Additions.m</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/OAuthCore.h</key>
                        <dict>
                            <key>Path</key>
                            <string>ABOAuthCore/OAuthCore.h</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/OAuthCore.m</key>
                        <dict>
                            <key>Path</key>
                            <string>ABOAuthCore/OAuthCore.m</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/TWAPIManager.h</key>
                        <dict>
                            <key>Path</key>
                            <string>TWAPIManager.h</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/TWAPIManager.m</key>
                        <dict>
                            <key>Path</key>
                            <string>TWAPIManager.m</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/TWSignedRequest.h</key>
                        <dict>
                            <key>Path</key>
                            <string>TWSignedRequest.h</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

                        <key>Classes/Networking/Twitter/TWSignedRequest.m</key>
                        <dict>
                            <key>Path</key>
                            <string>TWSignedRequest.m</string>
                            <key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
                        </dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.h</key>
						<dict>
							<key>Beginning</key>
							<string>#import "ServiceObjectManager.h"

extern NSString *const kTwitterKey;
extern NSString *const kTwitterSecret;

@interface TwitterServiceObjectManager : ServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m</key>
						<dict>
							<key>Beginning</key>
							<string>#import "TwitterServiceObjectManager.h"
#import "TWAPIManager.h"
#import "UIActionSheet+BlocksKit.h"

NSString *const kTwitterKey = @"&lt;# Twitter Consumer Key #&gt;";
NSString *const kTwitterSecret = @"&lt;# Twitter Consumer Secret #&gt;";
NSString *const kTwitterServiceErrorDomain = @"TwitterServiceErrorDomain";

@implementation TwitterServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
                            <array>
                            	<string>Networking</string>
                            	<string>Twitter</string>
                            </array>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:initWithServiceName</key>
						<dict>
							<key>Beginning</key>
							<string>- (id)initWithServiceName:(NSString *)serviceName
{
    if(self = [super initWithServiceName: serviceName])
    {
				    		</string>
				    		<key>End</key>
				    		<string>
	}
    return self;
}
				    		</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:sharedManager</key>
						<dict>
							<key>Beginning</key>
							<string>static TwitterServiceObjectManager *sharedInstance;
+ (instancetype)sharedManager{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        sharedInstance = [[TwitterServiceObjectManager alloc] initWithServiceName:@"Twitter"];
    });
							</string>
							<key>End</key>
							<string>    
	return sharedInstance;
}
							</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:sharedTwitterAccountStore</key>
						<dict>
							<key>Beginning</key>
							<string> static __strong ACAccountStore *store;
+ (ACAccountStore *)sharedTwitterAccountStore
{
	static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        store = [[ACAccountStore alloc] init];
    });
							</string>
							<key>End</key>
							<string>return store;
}
							</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:obtainAccessTokenForAcount</key>
						<dict>
							<key>Beginning</key>
							<string>#pragma mark - Authorization Helpers
- (void)obtainAccessTokenForAcount:(ACAccount *)account usingCallback:(void(^)(NSString *accessToken, NSError *error))callback
{
	TWAPIManager *apiManager = [[TWAPIManager alloc] init];
    
    [apiManager
     performReverseAuthForAccount:account
     withHandler:^(NSData *responseData, NSError *error) 
     {
         NSString *token = nil;
         if (responseData) 
         {
             token = [[NSString alloc]
                      initWithData:responseData
                      encoding:NSUTF8StringEncoding];
         }
         if(callback)
             callback(token, error);
     }];
				    		</string>
				    		<key>End</key>
				    		<string>}</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:selectTwitterAccountIndexFromAccounts</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)selectTwitterAccountIndexFromAccounts:(NSArray*)accounts withCallback:(void(^)(ACAccount* account))callback
{
	if([accounts count]>0){
        if([accounts count]==1)
        {
            callback(accounts[0]);
        }
        else
        {
            UIActionSheet* selectionSheet = [UIActionSheet bk_actionSheetWithTitle:NSLocalizedString(@"Twitter accounts", @"Twitter accounts selection sheet title")];
            [accounts eachWithIndex:^(ACAccount *account, NSUInteger index) 
            {
            	[selectionSheet addButtonWithTitle:account.username handler:^{
            		callback(account);
            	}]
            }];
            [selectionSheet setCancelButtonWithTitle:NSLocalizedString(@"Cancel", @"Twiter accounts selection cancel") handler:^{
            	callback(nil);
            }]
            selectionSheet.destructiveButtonIndex = [accounts count];
            [selectionSheet showInView:[UIApplication sharedApplication].keyWindow];
        }
    }
    else{
        callback(nil);
    }
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:defaultErrorForCode</key>
						<dict>
							<key>Beginning</key>
							<string>- (NSError *)defaultErrorForCode:(NSInteger)code underlyingError:(NSError *)underlyingError
{
	if(code == 7)
	{
        return [NSError errorWithDomain:kTwitterServiceErrorDomain
                                                   code:code
                                               userInfo:@{NSLocalizedDescriptionKey:NSLocalizedString(@"No Twitter accounts found", @"No Twitter Account error localized description"),
                                                          NSLocalizedRecoverySuggestionErrorKey:NSLocalizedString(@"Please, set up at least one account in your device's settings in order to share in Twitter", @"Twitter login error: no accounts found recovery suggestion")}];
    }
    else if(code == 6 || !underlyingError)
    {
        return [NSError errorWithDomain:kTwitterServiceErrorDomain
                                                            code:6
                                                        userInfo:@{NSLocalizedDescriptionKey:NSLocalizedString(@"Accounts access error", @"Twitter: accounts access error description"),NSLocalizedRecoverySuggestionErrorKey:NSLocalizedString(@"Please, allow ___PROJECTNAME___ to access your Twitter accounts from your device's privacy settings", @"TWitter: accounts access error recovery suggestion")}];
    }
    else		
    {
    	return underlyingError;
    }		
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:handleAccessToTwitterAccountsGrant</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)handleAccessToTwitterAccountsGrant:(NSArray *)accounts withPermissions:(ServiceObjectManagerPermissionSet)permissions
{
    [self selectTwitterAccountIndexFromAccounts:accounts withCallback:^(ACAccount *account) {
        if(account){
            [self obtainAccessTokenForAcount:account usingCallback:^(NSString *accessToken, NSError *tokenObtainingError) {
                
                if(accessToken.length>0){
                    CQTwitterAuthInfo *authInfo = [CQTwitterAuthInfo createInContext:[NSManagedObjectContext defaultContext]];
                    authInfo.authToken = [[[accessToken componentsSeparatedByString:@"&amp;"] first] substringFromIndex:12];
                    authInfo.tokenSecret = [[[NSRegularExpression regularExpressionWithPattern:@"oauth_token_secret=(\\w+?)&amp;" options:NSRegularExpressionCaseInsensitive error:nil] matchesSubsctringsInString:accessToken options:0 range:NSMakeRange(0, accessToken.length)] lastObject];
                    authInfo.userAccount = account;
                    authInfo.permissions = @(ServicePermissionSetWrite);
                    authInfo.accountName = account.username;
                    
                    [super logInWithCallback:nil permissions:permissions];
                    BLOCK_SAFE_RUN(callback, authInfo, nil);
                }
                else{
                    NSError *tokenError = [self defaultErrorForCode:CQNetworkingServiceErrorCodeAuthError underlyingError:tokenObtainingError];
                    if(callback)
                        callback(nil, tokenError);
                }
            }];
        }
        else{
            //User didn't choose an account by tapping on the dismiss button inside the sheet - do nothing:
            if(callback)
                callback(nil, nil);
        }
    }];
								
							</string>
						</dict>

						<key>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:logInWithCallback</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)logInWithCallback:(void^(NSDictionary*, NSError*))callback permissions:(ServiceObjectManagerPermissionSet)permissions
{
	ACAccountStore *accountStore = [TwitterServiceObjectManager sharedTwitterAccountStore];
    ACAccountStoreRequestAccessCompletionHandler handler = ^(BOOL granted, NSError *error)
    {
        dispatch_sync(dispatch_get_main_queue(), ^{
            if(granted) 
            {
                ACAccountType *accountTypeTwitter = [accountStore accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];
                NSArray* accounts = [accountStore accountsWithAccountType:accountTypeTwitter];
                
                if(accounts.count == 0)
                {
                	BLOCK_SAFE_RUN(callback, nil, [self defaultErrorForCode:7 underlyingError:nil]);
                }
                else
                {
                    [self selectTwitterAccountIndexFromAccounts:accs withCallback:^(ACAccount *account) 
                    {
                        if(account)
                        {
                            [self obtainAccessTokenForAcount:account usingCallback:^(NSString *accessToken, NSError *tokenObtainingError) {
                                
                                if(accessToken.length>0){
                                    CQTwitterAuthInfo *authInfo = [CQTwitterAuthInfo createInContext:[NSManagedObjectContext defaultContext]];
                                    authInfo.authToken = [[[accessToken componentsSeparatedByString:@"&amp;"] first] substringFromIndex:12];
                                    authInfo.tokenSecret = [[[NSRegularExpression regularExpressionWithPattern:@"oauth_token_secret=(\\w+?)&amp;" options:NSRegularExpressionCaseInsensitive error:nil] matchesSubsctringsInString:accessToken options:0 range:NSMakeRange(0, accessToken.length)] lastObject];
                                    authInfo.userAccount = account;
                                    authInfo.permissions = @(ServicePermissionSetWrite);
                                    authInfo.accountName = account.username;
                                    
                                    //call the super method to post the login notification
                                    [super logInWithCallback:nil permissions:permissions];
                                    BLOCK_SAFE_RUN(callback, authInfo, nil);
                                }
                                else{
                                    NSError *tokenError = [self defaultErrorForCode:CQNetworkingServiceErrorCodeAuthError underlyingError:tokenObtainingError];
                                    if(callback)
                                        callback(nil, tokenError);
                                }
                            }];
                        }
                        else{
                            //User didn't choose an account by tapping on the dismiss button inside the sheet - do nothing:
                            if(callback)
                                callback(nil, nil);
                        }
                    }];
                }
                
            }
            else{
                NSError *accountStoreError = nil;
                if(error.code == 7){
                    accountStoreError = [self noTwitterAccountsError];
                }
                else if(error.code == 6 || !error){
                    NSDictionary *noAccessErrorInfo = ;
                    accountStoreError = [NSError errorWithDomain:CQNetworkingServiceErrorDomain
                                                            code:6
                                                        userInfo:@{NSLocalizedDescriptionKey:NSLocalizedString(@"Accounts access error", @"Twitter: accounts access error description"),NSLocalizedRecoverySuggestionErrorKey:NSLocalizedString(@"Please, allow Cirqle to access your Twitter accounts from your device's privacy settings", @"TWitter: accounts access error recovery suggestion")}];
                }
                if(callback)
                    callback(nil, accountStoreError);
            }
        });
    };
    
    //preform accounts request with prepared callback:
    ACAccountType *accountTypeTwitter =[accountStore accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];
    [accountStore requestAccessToAccountsWithType:accountTypeTwitter options:nil completion:handler];
							</string>
							<key>End</key>
							<string>}</string>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>Classes/Networking/Twitter/OAuth+Additions.h</string>
						<string>Classes/Networking/Twitter/OAuth+Additions.m</string>
						<string>Classes/Networking/Twitter/OAuthCore.h</string>
						<string>Classes/Networking/Twitter/OAuthCore.m</string>
						<string>Classes/Networking/Twitter/TWAPIManager.h</string>
						<string>Classes/Networking/Twitter/TWAPIManager.m</string>
						<string>Classes/Networking/Twitter/TWSignedRequest.h</string>
						<string>Classes/Networking/Twitter/TWSignedRequest.m</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.h</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:initWithServiceName</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:sharedManager</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:sharedTwitterAccountStore</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:obtainAccessTokenForAcount</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:selectTwitterAccountIndexFromAccounts</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:defaultErrorForCode</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:handleAccessToTwitterAccountsGrant</string>
                        <string>Classes/Networking/Twitter/TwitterServiceObjectManager.m:method:logInWithCallback</string>
					</array>
                    <key>Targets</key>
                    <array>
                        <dict>
                            <key>Frameworks</key>
                            <array>
                                <string>Accounts</string>
                                <string>Social</string>
                                <string>Twitter</string>
                            </array>
                        </dict>
                    </array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
