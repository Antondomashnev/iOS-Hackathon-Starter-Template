<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Identifier</key>
	<string>com.antondomashnev.template.hackathonApplication.RestKit</string>
	<key>Name</key>
	<string>RestKit Dependency</string>
	<key>Ancestors</key>
	<array>
	</array>
	<key>Definitions</key>
	<dict> 
		<key>../Podfile:RestKit</key>
		<string>pod &quot;RestKit&quot;, &quot;~> 0.20.3&quot;</string>

		<key>___PACKAGENAME___-Prefix.pch:objC:SystemConfiguration</key>
		<string>#import &lt;SystemConfiguration/SystemConfiguration.h&gt;</string>
		<key>___PACKAGENAME___-Prefix.pch:objC:MobileCoreServices</key>
		<string>#import &lt;MobileCoreServices/MobileCoreServices.h&gt;</string>

		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:RestKit</key>
		<string>#import &lt;RestKit/RestKit.h&gt;</string>

		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:method:initializeLogging:RKLogConfiguration</key>
		<string>RKLogConfigureByName("RestKit/Network", RKLogLevelWarning);</string>

		<key>Classes/ServiceObjectManager.h</key>
		<dict>
			<key>Beginning</key>
			<string>#import &lt;Foundation/Foundation.h&gt;
#import &lt;RestKit/RestKit.h&gt;

typedef NS_ENUM(NSInteger, ServiceObjectManagerPermissionSet)
{
    ServiceObjectManagerPermissionSetRead = 1,
    ServiceObjectManagerPermissionSetWrite = 2
};

typedef NS_ENUM(NSInteger, ServiceObjectManagerErrorCode)
{
    ServiceObjectManagerErrorCodeNoAccountsFoundError = 1,
    ServiceObjectManagerErrorCodeAccountsAccessError = 2,
    ServiceObjectManagerErrorCodeAuthorizationError = 3
};

extern NSString * const kServiceAccessTokenKey;
extern NSString * const kServiceTokenSecretKey;

@interface ServiceObjectManager : RKObjectManager

@property (nonatomic, strong, readonly) NSString *serviceName;

+ (instancetype)sharedManager;
- (id)initWithHTTPClient:(AFHTTPClient *)client serviceName:(NSString *)serviceName;
- (id)initWithServiceName:(NSString *)serviceName;
- (void)logInWithPermissions:(ServiceObjectManagerPermissionSet)permissions callback:(void (^)(NSDictionary*, NSError*))callback;
- (NSError *)errorForCode:(ServiceObjectManagerErrorCode)code underlyingError:(NSError *)error;
			</string>
			<key>End</key>
			<string>@end</string>
			<key>Group</key>
			<string>Networking</string>
		</dict>

		<key>Classes/ServiceObjectManager.m</key>
		<dict>
			<key>Beginning</key>
			<string>#import "ServiceObjectManager.h"

NSString * const kServiceAccessTokenKey = @"___PROJECTNAME___.kServiceObjectManager";
NSString * const kServiceTokenSecretKey = @"___PROJECTNAME___.kServiceTokenSecretKey";

@interface ServiceObjectManager()
@property (nonatomic, strong, readwrite) NSString *serviceName;
@end

@implementation ServiceObjectManager
			</string>
			<key>End</key>
			<string>@end</string>
			<key>Group</key>
			<string>Networking</string>
		</dict>

		<key>Classes/ServiceObjectManager.m:method:initWithHTTPClient</key>
		<dict>
			<key>Beginning</key>
			<string>- (id)initWithHTTPClient:(AFHTTPClient *)client serviceName:(NSString *)serviceName
{
	if(self = [super initWithHTTPClient:client]){
        self.serviceName = serviceName;
    }

    return self;
    		</string>
    		<key>End</key>
    		<string>}</string>
    		<key>Indent</key>
			<integer>1</integer>
		</dict>

		<key>Classes/ServiceObjectManager.m:method:initWithServiceName</key>
		<dict>
			<key>Beginning</key>
			<string>- (id)initWithServiceName:(NSString *)serviceName
{
	if(self = [super init]){
        self.serviceName = serviceName;
    }

    return self;
    		</string>
    		<key>End</key>
    		<string>}</string>
    		<key>Indent</key>
			<integer>1</integer>
		</dict>

		<key>Classes/ServiceObjectManager.m:method:sharedManager</key>
		<dict>
			<key>Beginning</key>
			<string>+ (instancetype)sharedManager
{
	METHOD_NOT_IMPLEMENTED();
			</string>
			<key>End</key>
			<string>}</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>

		<key>Classes/ServiceObjectManager.m:method:errorForCode</key>
		<dict>
			<key>Beginning</key>
			<string>#pragma mark - Interface
- (NSError *)errorForCode:(ServiceObjectManagerErrorCode)code underlyingError:(NSError *)error
{
	NSString *serviceErrorDomain = [NSString stringWithFormat:@"%@ErrorDomain", NSStringFromClass([self class])];
    switch (code) {
        case ServiceObjectManagerErrorCodeAccountsAccessError:
        {
            return [NSError errorWithDomain:serviceErrorDomain
                                code:code
                            userInfo:@{NSLocalizedDescriptionKey:[NSString stringWithFormat:NSLocalizedString(@"%@ accounts access error", @"%@ accounts access error description"), self.serviceName, self.serviceName],
                                       NSLocalizedRecoverySuggestionErrorKey:[NSString stringWithFormat:NSLocalizedString(@"Please, allow TemplateTester to access your %@ accounts from your device's privacy settings", @"%@ accounts access error recovery suggestion"), self.serviceName, self.serviceName],
                                       NSUnderlyingErrorKey:error ? error : [NSNull null]}];
        }
        case ServiceObjectManagerErrorCodeNoAccountsFoundError:
        {
            return [NSError errorWithDomain:serviceErrorDomain
                                       code:code
                                   userInfo:@{NSLocalizedDescriptionKey:[NSString stringWithFormat:NSLocalizedString(@"No %@ accounts found", @"No %@ account error localized description"), self.serviceName, self.serviceName],
                                              NSLocalizedRecoverySuggestionErrorKey:[NSString stringWithFormat:NSLocalizedString(@"Please, set up at least one %@ account in your device's settings", @"%@ no accounts found recovery suggestion"), self.serviceName, self.serviceName],
                                              NSUnderlyingErrorKey:error ? error : [NSNull null]}];
        }
        case ServiceObjectManagerErrorCodeAuthorizationError:
        {
            return [NSError errorWithDomain:serviceErrorDomain
                                       code:code
                                   userInfo:@{NSLocalizedDescriptionKey:[NSString stringWithFormat:NSLocalizedString(@"Authentication error", @"%@ authentication error localized description"), self.serviceName, self.serviceName],
                                              NSLocalizedRecoverySuggestionErrorKey:[NSString stringWithFormat:NSLocalizedString(@"Please, try to relogin with your %@ account", @"%@ authentication error recovery suggestion"), self.serviceName, self.serviceName],
                                              NSUnderlyingErrorKey:error ? error : [NSNull null]}];
        }
        default:
        {
            return error;
        }
    }

			</string>
			<key>End</key>
			<string>}</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>

		<key>Classes/ServiceObjectManager.m:method:logInWithPermissions</key>
		<dict>
			<key>Beginning</key>
			<string>- (void)logInWithPermissions:(ServiceObjectManagerPermissionSet)permissions callback:(void (^)(NSDictionary *, NSError *))callback
{
	METHOD_NOT_IMPLEMENTED();
			</string>
			<key>End</key>
			<string>}</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
	</dict>
	<key>Description</key>
	<string></string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>../Podfile:RestKit</string>
		<string>___PACKAGENAME___-Prefix.pch:objC:SystemConfiguration</string>
		<string>___PACKAGENAME___-Prefix.pch:objC:MobileCoreServices</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:RestKit</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:method:initializeLogging:RKLogConfiguration</string>
		<string>Classes/ServiceObjectManager.h</string>
		<string>Classes/ServiceObjectManager.m</string>
		<string>Classes/ServiceObjectManager.m:method:initWithHTTPClient</string>
		<string>Classes/ServiceObjectManager.m:method:initWithServiceName</string>
		<string>Classes/ServiceObjectManager.m:method:sharedManager</string>
		<string>Classes/ServiceObjectManager.m:method:errorForCode</string>
		<string>Classes/ServiceObjectManager.m:method:logInWithPermissions</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Whether the application should use the Core Data framework for storage</string>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Name</key>
			<string>Use Core Data</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>../Podfile:MagicalRecord</key>
            			<string>pod &quot;MagicalRecord&quot;, &quot;~> 2.2&quot;</string>

            			<key>___PACKAGENAME___-Prefix.pch:objC:importCoreDataMagicalRecord</key>
            			<string>#import &lt;MagicalRecord/CoreData+MagicalRecord.h&gt;</string>

            			<key>___PACKAGENAME___-Prefix.pch:objC:importMagicalRecordShorthand</key>
            			<string>#define MR_SHORTHAND</string>

            			<key>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</key>
						<dict>
							<key>Path</key>
							<string>___PACKAGENAMEASIDENTIFIER___DataModel.xcdatamodeld</string>
              				<key>Group</key>
              				<string>Models</string>
						</dict>

						<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:NSManagedObjectContextCategory</key>
						<dict>
							<key>Beginning</key>
							<string>
@interface NSManagedObjectContext (MRDefaultContextSetter)
+(void) MR_setDefaultContext:(NSManagedObjectContext*)context;
+(void) MR_setRootSavingContext:(NSManagedObjectContext*)context;
+(void) MR_cleanUp;
							</string>
							<key>End</key>
							<string>
@end
							</string>
						</dict>

						<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:method:initializeLogging</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)initializeCoreData
{
	NSURL *modelURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"___PACKAGENAMEASIDENTIFIER___DataModel" ofType:@"momd"]];
    NSAssert(modelURL != nil, @"Unable to find DataModel in main bundle");

    NSManagedObjectModel *managedObjectModel = [[[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL] mutableCopy];
    RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];
    NSString *storePath = [RKApplicationDataDirectory() stringByAppendingPathComponent:@"___PACKAGENAMEASIDENTIFIER___DataModel"];
    NSError *error = nil;
    
    NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:
                             [NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption,
                             [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];
    [managedObjectStore addSQLitePersistentStoreAtPath:storePath fromSeedDatabaseAtPath:nil withConfiguration:nil options:options error:&amp;error];
    if(!error){
        [managedObjectStore createManagedObjectContexts];
        // Configure MagicalRecord to use RestKit's Core Data stack
        [NSPersistentStoreCoordinator MR_setDefaultStoreCoordinator:managedObjectStore.persistentStoreCoordinator];
        [NSManagedObjectContext MR_setRootSavingContext:managedObjectStore.persistentStoreManagedObjectContext];
        [NSManagedObjectContext MR_setDefaultContext:managedObjectStore.mainQueueManagedObjectContext];
	}
   							</string>
   							<key>End</key>
							<string>
}
							</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>../Podfile:MagicalRecord</string>
						<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:NSManagedObjectContextCategory</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:method:initializeLogging</string>
						<string>___PACKAGENAME___-Prefix.pch:objC:importCoreDataMagicalRecord</string>
						<string>___PACKAGENAME___-Prefix.pch:objC:importMagicalRecordShorthand</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:RestKit</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:method:initializeLogging:RKLogConfiguration</string>
						<string>Classes/ServiceObjectManager.h</string>
						<string>Classes/ServiceObjectManager.m</string>
					</array>
					<key>Targets</key>
					<array>
						<dict>
							<key>Frameworks</key>
							<array>
								<string>CoreData</string>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
