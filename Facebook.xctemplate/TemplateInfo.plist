<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Identifier</key>
	<string>com.antondomashnev.template.hackathonApplication.Facebook</string>
	<key>Name</key>
	<string>Facebook Dependency</string>
	<key>Ancestors</key>
	<array>
	</array>
	<key>Description</key>
	<string></string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Whether the application should use support Facebook authorization and other</string>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Name</key>
			<string>Enable Facebook</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>Options</key>
						<array>
							<dict>
								<key>Identifier</key>
								<string>coredata</string>
								<key>Units</key>
								<dict>
									<key>true</key>
									<dict>
										<key>Classes/Networking/Facebook/FacebookServiceDownloadableManagedObjectProtocol.h</key>
										<dict>
											<key>Path</key>
											<string>FacebookServiceDownloadableManagedObjectProtocol.h</string>
												<key>Group</key>
												<array>
													<string>Networking</string>
													<string>Facebook</string>
												</array>
										</dict>

										<key>Classes/Networking/Facebook/FacebookServicePostableManagedObjectProtocol.h</key>
										<dict>
											<key>Path</key>
											<string>FacebookServicePostableManagedObjectProtocol.h</string>
												<key>Group</key>
												<array>
													<string>Networking</string>
													<string>Facebook</string>
												</array>
										</dict>
									</dict>
									<key>false</key>
									<dict>
										<key>Classes/Networking/Facebook/FacebookServiceDownloadableObjectProtocol.h</key>
										<dict>
											<key>Path</key>
											<string>FacebookServiceDownloadableObjectProtocol.h</string>
												<key>Group</key>
												<array>
													<string>Networking</string>
													<string>Facebook</string>
												</array>
										</dict>

										<key>Classes/Networking/Facebook/FacebookServicePostableObjectProtocol.h</key>
										<dict>
											<key>Path</key>
											<string>FacebookServicePostableObjectProtocol.h</string>
												<key>Group</key>
												<array>
													<string>Networking</string>
													<string>Facebook</string>
												</array>
										</dict>
									</dict>
								</dict>
							</dict>
						</array>


						<key>../Podfile:Facebook-iOS-SDK</key>
						<string>pod &quot;Facebook-iOS-SDK&quot;, &quot;~> 3.11&quot;</string>


						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.h</key>
						<dict>
							<key>Beginning</key>
							<string>#import "ServiceObjectManager.h"

@interface FacebookServiceObjectManager : ServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
							<array>
								<string>Networking</string>
								<string>Facebook</string>
							</array>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m</key>
						<dict>
							<key>Beginning</key>
							<string>#import "FacebookServiceObjectManager.h"
#import &lt;FacebookSDK/FacebookSDK.h&gt;

static NSString * const kFacebookAppID = @"&lt;# Facebook App ID #&gt;";
static NSString * const kFacebookBaseURL = @"https://graph.facebook.com";

NSString * const kFacebookAccessTokenKey = @"___PROJECTNAME___.kFacebookAccessTokenKey";
NSString * const kFacebookExpirationDateKeyKey = @"___PROJECTNAME___.kFacebookExpirationDateKeyKey";

@implementation FacebookServiceObjectManager
							</string>
							<key>End</key>
							<string>@end</string>
							<key>Group</key>
							<array>
								<string>Networking</string>
								<string>Facebook</string>
							</array>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:initWithHTTPClient</key>
						<dict>
							<key>Beginning</key>
							<string>- (id)initWithHTTPClient:(AFHTTPClient *)client
{
    self = [super initWithHTTPClient:client serviceName:@"Facebook"];
    if(self)
    {

				    		</string>
				    		<key>End</key>
				    		<string>
	}
    return self;
}
				    		</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:sharedManager</key>
						<dict>
							<key>Beginning</key>
							<string>static FacebookServiceObjectManager *sharedManager;
+ (instancetype)sharedManager{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        sharedManager = [[FacebookServiceObjectManager alloc] initWithHTTPClient:[AFHTTPClient clientWithBaseURL: [NSURL URLWithString:kFacebookBaseURL]]];
    });
							</string>
							<key>End</key>
							<string>    
	return sharedManager;
}
							</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:facebookServiceReadPermissions</key>
						<dict>
							<key>Beginning</key>
							<string>#pragma mark - Permissions
+ (NSArray *)facebookServiceReadPermissions
{
	return @[@"&lt;# Read permission #&gt;", @"&lt;# Another read permission #&gt;"];							
							</string>
							<key>End</key>
							<string>}
							</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:facebookServiceWritePermissions</key>
						<dict>
							<key>Beginning</key>
							<string>+ (NSArray *)facebookServiceWritePermissions
{
	return @[@"&lt;# Write permission #&gt;", @"&lt;# Another write permission #&gt;"];							
							</string>
							<key>End</key>
							<string>}
							</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:completeRequestParametersForParameters</key>
						<dict>
							<key>Beginning</key>
							<string>#pragma mark - Helpers
- (NSDictionary *)completeRequestParametersForParameters:(NSDictionary *)params
{
	NSMutableDictionary *fullParameters = [NSMutableDictionary new];
    if(params)
    {
        [fullParameters setValuesForKeysWithDictionary:params];
    }
    if([FBSession activeSession].accessTokenData.accessToken)
    {
        fullParameters[@"access_token"] = [FBSession activeSession].accessTokenData.accessToken;
    }
				    		</string>
				    		<key>End</key>
				    		<string>
    return fullParameters;
}
							</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:appropriateObjectRequestOperationWithObject</key>
						<dict>
							<key>Beginning</key>
							<string>#pragma mark - RKObjectManager
- (id)appropriateObjectRequestOperationWithObject:(id)object
                                           method:(RKRequestMethod)method
                                             path:(NSString *)path
                                       parameters:(NSDictionary *)parameters
{
							</string>
							<key>End</key>
							<string>        
	return [super appropriateObjectRequestOperationWithObject:object method:method path:path parameters:[self completeRequestParametersForParameters: parameters]];
}
							</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:openSessionIfTokenLoaded</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)openSessionIfTokenLoaded
{
    if([FBSession activeSession].state == FBSessionStateCreatedTokenLoaded){
        
        if(![[FBSession activeSession].permissions containsObject:[[FacebookServiceObjectManager facebookServiceWritePermissions] firstObject]])
        {
            [FBSession openActiveSessionWithReadPermissions:[FacebookServiceObjectManager facebookServiceReadPermissions]
                                               allowLoginUI:YES
                                          completionHandler:nil];
        }
        else if([[FBSession activeSession].permissions containsObject: [[FacebookServiceObjectManager facebookServiceWritePermissions] firstObject]])
        {
            [FBSession openActiveSessionWithPublishPermissions:[FacebookServiceObjectManager facebookServiceWritePermissions]
                                               defaultAudience:FBSessionDefaultAudienceEveryone
                                                  allowLoginUI:YES
                                             completionHandler:nil];
        }
    }
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:defaultErrorForCode</key>
						<dict>
							<key>Beginning</key>
							<string>- (NSError *)defaultErrorForCode:(NSInteger)code underlyingError:(NSError *)underlyingError
{
	if(code == FBErrorLoginFailedOrCancelled){
        NSString *loginFailingReason = underlyingError.userInfo[FBErrorLoginFailedReason];
        if([loginFailingReason isEqualToString:@"com.facebook.sdk:SystemLoginDisallowedWithoutError"]){
            return [NSError errorWithDomain:underlyingError.domain code:code userInfo:@{NSLocalizedDescriptionKey:NSLocalizedString(@"Accounts access error", @"Facebook: accounts access error description"),
                                                                                        NSLocalizedRecoverySuggestionErrorKey:NSLocalizedString(@"Please, allow ___PROJECTNAME___ to access your Facebook accounts from your device's privacy settings", @"Facebook: accounts access error recovery suggestion")}];
        }
        else{
            return underlyingError;
        }
    }
    else{
        return underlyingError;
    }				
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:logInWithCallback</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)logInWithPermissions:(ServiceObjectManagerPermissionSet)permissions callback:(void (^)(NSDictionary*, NSError*))callback
{
    [self updateiOSFacebookCredentialsWithCallback:^(ACAccountCredentialRenewResult renewResult, NSError *error) {
		void(^localCallback)(FBSession *session, FBSessionState state, ServiceObjectManagerPermissionSet permissions, NSError *error) = ^(FBSession *session, FBSessionState state, ServiceObjectManagerPermissionSet permissions, NSError *error){
	        if(FB_ISSESSIONOPENWITHSTATE(state) &amp;&amp;
	           error == nil)
	           	{
	           		DDLogInfo(@"Facebook login succes");
	           		NSMutableDictionary *result = [@{} mutableCopy];
	           		if(session.accessTokenData.accessToken)
	           		{
	           			result[kServiceAccessTokenKey] = session.accessTokenData.accessToken;
	           		}

	           		BLOCK_SAFE_RUN(callback, result, error);
	        }
	        else
	        {
	            DDLogWarn(@"Facebook login failed: %@", [error description]);
	            BLOCK_SAFE_RUN(callback, nil, error);
	        }
	    };

	    switch (permissions) 
	    {
	        case ServiceObjectManagerPermissionSetRead:
	        {
	            [FBSession openActiveSessionWithReadPermissions:[FacebookServiceObjectManager facebookServiceReadPermissions]
	                                                  allowLoginUI:YES
	                                             completionHandler:^(FBSession *session, FBSessionState status, NSError *error) 
	                                             {
	                                                 localCallback(session, status, permissions, error);
	                                             }];
	            break;
	        }
	        case ServiceObjectManagerPermissionSetWrite:
	        {
	        	if(FB_ISSESSIONOPENWITHSTATE([FBSession activeSession].state))
	        	{
	        		[[FBSession activeSession] requestNewPublishPermissions:[FacebookServiceObjectManager facebookServiceWritePermissions] defaultAudience:FBSessionDefaultAudienceEveryone completionHandler:^(FBSession *session, NSError *error) 
		       		{
		                localCallback(session, session.state, permissions, error);
		            }];
	        	}
	        	else
	        	{
	        		[FBSession openActiveSessionWithPublishPermissions:[FacebookServiceObjectManager facebookServiceWritePermissions] defaultAudience:FBSessionDefaultAudienceEveryone allowLoginUI:YES completionHandler:^(FBSession *session, FBSessionState status, NSError *error)
	                {
	                    localCallback(session, [FBSession activeSession].state, permissions, error);
	                }];
	        	}
	            break;
	        }
	        default:
	            break;
	    }
	}];
							</string>
							<key>End</key>
							<string>}</string>
						</dict>

						<key>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:updateiOSFacebookCredentialsWithCallback</key>
						<dict>
							<key>Beginning</key>
							<string>- (void)updateiOSFacebookCredentialsWithCallback:(void(^)(ACAccountCredentialRenewResult renewResult, NSError *error))callback
{
	void(^modifiedCallback)(ACAccountCredentialRenewResult renewResult, NSError *error) = ^(ACAccountCredentialRenewResult renewResult, NSError *error){
        dispatch_async(dispatch_get_main_queue(), ^(void) {
            [[FBSession activeSession] closeAndClearTokenInformation];
            callback(renewResult, error);
        });
    };

	ACAccountStore *accountStore = [ACAccountStore new];
    ACAccountType *accountTypeFB = [accountStore accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierFacebook];
	NSArray *fbAccounts = [accountStore accountsWithAccountType:accountTypeFB];
    if ([fbAccounts count] > 0)
    {
    	[accountStore renewCredentialsForAccount:fbAccounts[0] completion:modifiedCallback];
   	}
   	else
   	{
   		modifiedCallback(ACAccountCredentialRenewResultFailed, nil);
   	}
							</string>
							<key>End</key>
							<string>}</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>
					</dict>
					<key>Nodes</key>
					<array>
						<string>../Podfile:Facebook-iOS-SDK</string>
						<string>Classes/Networking/Facebook/FacebookServiceDownloadableObjectProtocol.h</string>
						<string>Classes/Networking/Facebook/FacebookServicePostableObjectProtocol.h</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.h</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:initWithHTTPClient</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:sharedManager</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:facebookServiceReadPermissions</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:facebookServiceWritePermissions</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:completeRequestParametersForParameters</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:appropriateObjectRequestOperationWithObject</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:logInWithCallback</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:updateiOSFacebookCredentialsWithCallback</string>
						<string>Classes/Networking/Facebook/FacebookServiceObjectManager.m:method:openSessionIfTokenLoaded</string>
					</array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
